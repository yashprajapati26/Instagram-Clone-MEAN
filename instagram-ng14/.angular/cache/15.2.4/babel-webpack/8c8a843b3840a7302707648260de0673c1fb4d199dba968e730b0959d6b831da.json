{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../components/auth/auth.service\";\nexport class InterceptorService {\n  constructor(authservice) {\n    this.authservice = authservice;\n  }\n  intercept(req, next) {\n    const auth_token = this.authservice.getToken();\n    if (auth_token != null) {\n      const authRequest = req.clone({\n        headers: req.headers.set('auth_token', auth_token)\n      });\n      return next.handle(authRequest);\n    }\n    return next.handle(req);\n  }\n}\nInterceptorService.ɵfac = function InterceptorService_Factory(t) {\n  return new (t || InterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\nInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InterceptorService,\n  factory: InterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,kBAAkB;EAE7BC,YAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;EAAgB;EAC/CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAEhD,MAAMC,UAAU,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IAE9C,IAAGD,UAAU,IAAI,IAAI,EAAC;MACpB,MAAME,WAAW,GAAGJ,GAAG,CAACK,KAAK,CAAC;QAC5BC,OAAO,EAAGN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,YAAY,EAACL,UAAU;OAClD,CAAC;MACF,OAAOD,IAAI,CAACO,MAAM,CAACJ,WAAW,CAAC;;IAGjC,OAAOH,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC;EAEzB;;AAhBWJ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAa,SAAlBb,kBAAkB;EAAAc,YAFjB;AAAM","names":["InterceptorService","constructor","authservice","intercept","req","next","auth_token","getToken","authRequest","clone","headers","set","handle","factory","providedIn"],"sourceRoot":"","sources":["/home/yash.prajapati/Desktop/Node/Instagram Clone/instagram-ng14/src/app/interceptor/interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../components/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InterceptorService implements HttpInterceptor{\n\n  constructor(private authservice:AuthService) { }\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    const auth_token = this.authservice.getToken();\n    \n    if(auth_token != null){\n      const authRequest = req.clone({\n        headers : req.headers.set('auth_token',auth_token)\n      })\n      return next.handle(authRequest);\n    }\n\n    return next.handle(req);\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}