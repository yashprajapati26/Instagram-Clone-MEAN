{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../components/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthguardGuard {\n  constructor(authservice, router) {\n    this.authservice = authservice;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    let userToken = this.authservice.getToken();\n    if (userToken) {\n      return true;\n    } else {\n      this.router.navigateByUrl('/login');\n      return false;\n    }\n  }\n}\nAuthguardGuard.ɵfac = function AuthguardGuard_Factory(t) {\n  return new (t || AuthguardGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthguardGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthguardGuard,\n  factory: AuthguardGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,cAAc;EAEzBC,YAAoBC,WAAuB,EAAUC,MAAa;IAA9C,gBAAW,GAAXD,WAAW;IAAsB,WAAM,GAANC,MAAM;EAAS;EAEpEC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAExB,IAAIC,SAAS,GAAG,IAAI,CAACL,WAAW,CAACM,QAAQ,EAAE;IAC3C,IAAGD,SAAS,EAAC;MACX,OAAO,IAAI;KACZ,MACG;MACF,IAAI,CAACJ,MAAM,CAACM,aAAa,CAAC,QAAQ,CAAC;MACnC,OAAO,KAAK;;EAElB;;AAhBWT,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAU,SAAdV,cAAc;EAAAW,YAFb;AAAM","names":["AuthguardGuard","constructor","authservice","router","canActivate","route","state","userToken","getToken","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["/home/yash.prajapati/Desktop/Node/Instagram Clone/instagram-ng14/src/app/guards/authguard.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../components/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthguardGuard implements CanActivate {\n\n  constructor(private authservice:AuthService, private router:Router){}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      \n      let userToken = this.authservice.getToken()\n      if(userToken){\n        return true;\n      }\n      else{\n        this.router.navigateByUrl('/login');\n        return false;\n      }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}