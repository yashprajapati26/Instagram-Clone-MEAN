{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { environment } from 'src/environments/environment.development';\nlet FeedlistComponent = class FeedlistComponent {\n  constructor(router, feedlistservice) {\n    this.router = router;\n    this.feedlistservice = feedlistservice;\n    this.imageUrl = environment.apiURL;\n    this.replyToggle = false;\n  }\n  ngOnInit() {\n    this.fatchFeed();\n    this.fatchUserDetails();\n    this.fatchAllUsers();\n    // this.allUsers = this.allUsers.filter((item:any) => item.id !== this.user.id);\n    console.log(this.allUsers);\n  }\n  fatchFeed() {\n    this.feedlistservice.getFeeds().subscribe(res => {\n      console.log(res);\n      this.feeds = res['feeds'];\n    });\n  }\n  fatchUserDetails() {\n    let userId = localStorage.getItem('userId');\n    this.feedlistservice.getUserDetails(userId).subscribe(res => {\n      console.log(res);\n      this.user = res['user'];\n    });\n  }\n  fatchAllUsers() {\n    this.feedlistservice.getAllUsers().subscribe(res => {\n      this.allUsers = res['allusers'];\n    });\n  }\n  likedPost(event) {\n    let postId = event.target.id || event.srcElement.id || event.currentTarget.id;\n    let btn = document.getElementById(postId);\n    if (btn?.getAttribute(\"fill\") != \"red\") {\n      btn?.setAttribute(\"fill\", \"red\");\n    } else {\n      btn?.setAttribute(\"fill\", \"gray\");\n    }\n    let userId = localStorage.getItem('userId');\n    let data = {\n      userId: userId,\n      postId: postId\n    };\n    this.feedlistservice.likedDislikePost(data).subscribe(res => {\n      console.log(res);\n    });\n  }\n  addComment(event) {\n    let cmtBox = event.target.id || event.srcElement.id || event.currentTarget.id;\n  }\n  toggleReplayBox(id) {\n    this.replyToggle = !this.replyToggle;\n  }\n};\nFeedlistComponent = __decorate([Component({\n  selector: 'app-feedlist',\n  templateUrl: './feedlist.component.html',\n  styleUrls: ['./feedlist.component.scss']\n})], FeedlistComponent);\nexport { FeedlistComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,WAAW,QAAQ,0CAA0C;AAQ/D,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAS5BC,YAAoBC,MAAa,EAASC,eAA+B;IAArD,WAAM,GAAND,MAAM;IAAgB,oBAAe,GAAfC,eAAe;IANzD,aAAQ,GAAGJ,WAAW,CAACK,MAAM;IAG7B,gBAAW,GAAY,KAAK;EAG+C;EAE3EC,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACC,gBAAgB,EAAE;IACvB,IAAI,CAACC,aAAa,EAAE;IAEpB;IAEAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,QAAQ,CAAC;EAC5B;EAGAL,SAAS;IACP,IAAI,CAACH,eAAe,CAACS,QAAQ,EAAE,CAACC,SAAS,CAAEC,GAAO,IAAG;MACnDL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;MAChB,IAAI,CAACC,KAAK,GAAGD,GAAG,CAAC,OAAO,CAAC;IAC3B,CAAC,CAAC;EACJ;EAEAP,gBAAgB;IACd,IAAIS,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC3C,IAAI,CAACf,eAAe,CAACgB,cAAc,CAACH,MAAM,CAAC,CAACH,SAAS,CAAEC,GAAO,IAAG;MAC/DL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;MAChB,IAAI,CAACM,IAAI,GAAGN,GAAG,CAAC,MAAM,CAAC;IACzB,CAAC,CAAC;EACJ;EAEAN,aAAa;IACX,IAAI,CAACL,eAAe,CAACkB,WAAW,EAAE,CAACR,SAAS,CAAEC,GAAO,IAAG;MACtD,IAAI,CAACH,QAAQ,GAAGG,GAAG,CAAC,UAAU,CAAC;IACjC,CAAC,CAAC;EACJ;EAEAQ,SAAS,CAACC,KAAS;IAEjB,IAAIC,MAAM,GAAGD,KAAK,CAACE,MAAM,CAACC,EAAE,IAAIH,KAAK,CAACI,UAAU,CAACD,EAAE,IAAIH,KAAK,CAACK,aAAa,CAACF,EAAE;IAC7E,IAAIG,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAACP,MAAM,CAAC;IAEzC,IAAGK,GAAG,EAAEG,YAAY,CAAC,MAAM,CAAC,IAAE,KAAK,EAAC;MAClCH,GAAG,EAAEI,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC;KACjC,MAAI;MACHJ,GAAG,EAAEI,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;;IAGnC,IAAIjB,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC3C,IAAIgB,IAAI,GAAG;MAAClB,MAAM,EAAGA,MAAM;MAAGQ,MAAM,EAAGA;IAAM,CAAC;IAE9C,IAAI,CAACrB,eAAe,CAACgC,gBAAgB,CAACD,IAAI,CAAC,CAACrB,SAAS,CAAEC,GAAO,IAAG;MAC/DL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;IAClB,CAAC,CAAC;EACJ;EAEAsB,UAAU,CAACb,KAAS;IAClB,IAAIc,MAAM,GAAGd,KAAK,CAACE,MAAM,CAACC,EAAE,IAAIH,KAAK,CAACI,UAAU,CAACD,EAAE,IAAIH,KAAK,CAACK,aAAa,CAACF,EAAE;EAE/E;EAEAY,eAAe,CAACZ,EAAM;IAEpB,IAAI,CAACa,WAAW,GAAG,CAAC,IAAI,CAACA,WAAW;EACtC;CACD;AAvEYvC,iBAAiB,eAL7BF,SAAS,CAAC;EACT0C,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACW1C,iBAAiB,CAuE7B;SAvEYA,iBAAiB","names":["Component","environment","FeedlistComponent","constructor","router","feedlistservice","apiURL","ngOnInit","fatchFeed","fatchUserDetails","fatchAllUsers","console","log","allUsers","getFeeds","subscribe","res","feeds","userId","localStorage","getItem","getUserDetails","user","getAllUsers","likedPost","event","postId","target","id","srcElement","currentTarget","btn","document","getElementById","getAttribute","setAttribute","data","likedDislikePost","addComment","cmtBox","toggleReplayBox","replyToggle","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/yash.prajapati/Desktop/Node/Instagram Clone/instagram-ng14/src/app/components/feedlist/feedlist.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { environment } from 'src/environments/environment.development';\nimport { FeedlistService } from './feedlist.service';\n\n@Component({\n  selector: 'app-feedlist',\n  templateUrl: './feedlist.component.html',\n  styleUrls: ['./feedlist.component.scss']\n})\nexport class FeedlistComponent {\n\n  feeds : any; \n  imageUrl = environment.apiURL\n  user: any;\n  allUsers:any\n  replyToggle :boolean = false;\n\n\n  constructor(private router:Router,private feedlistservice:FeedlistService){}\n\n  ngOnInit(){\n    this.fatchFeed();\n    this.fatchUserDetails();\n    this.fatchAllUsers();\n\n    // this.allUsers = this.allUsers.filter((item:any) => item.id !== this.user.id);\n\n    console.log(this.allUsers)\n  }\n\n\n  fatchFeed(){\n    this.feedlistservice.getFeeds().subscribe((res:any)=>{\n      console.log(res)\n      this.feeds = res['feeds']\n    })\n  } \n\n  fatchUserDetails(){\n    let userId = localStorage.getItem('userId')\n    this.feedlistservice.getUserDetails(userId).subscribe((res:any)=>{\n      console.log(res)\n      this.user = res['user']\n    })\n  }\n\n  fatchAllUsers(){\n    this.feedlistservice.getAllUsers().subscribe((res:any)=>{\n      this.allUsers = res['allusers']\n    })\n  }\n\n  likedPost(event:any){\n    \n    let postId = event.target.id || event.srcElement.id || event.currentTarget.id;\n    let btn = document.getElementById(postId);\n\n    if(btn?.getAttribute(\"fill\")!=\"red\"){\n      btn?.setAttribute(\"fill\", \"red\")\n    }else{\n      btn?.setAttribute(\"fill\", \"gray\")\n    }\n    \n    let userId = localStorage.getItem('userId')\n    let data = {userId : userId , postId : postId}\n    \n    this.feedlistservice.likedDislikePost(data).subscribe((res:any)=>{\n      console.log(res)     \n    })\n  }\n\n  addComment(event:any){\n    let cmtBox = event.target.id || event.srcElement.id || event.currentTarget.id;\n\n  }\n\n  toggleReplayBox(id:any){\n\n    this.replyToggle = !this.replyToggle\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}