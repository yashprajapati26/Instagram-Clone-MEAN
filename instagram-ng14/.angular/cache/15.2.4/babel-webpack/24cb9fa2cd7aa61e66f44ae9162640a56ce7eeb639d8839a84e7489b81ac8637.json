{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { environment } from 'src/environments/environment.development';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet AddCommentComponent = class AddCommentComponent {\n  constructor(postservice, activateRoute, authservice) {\n    this.postservice = postservice;\n    this.activateRoute = activateRoute;\n    this.authservice = authservice;\n    this.imageUrl = environment.apiURL;\n    this.cmtForm = new FormGroup({\n      postId: new FormControl(\"\", Validators.required),\n      cmtBy: new FormControl(\"\", Validators.required),\n      comment: new FormControl(\"\", Validators.required),\n      parentId: new FormControl(null, Validators.required)\n    });\n  }\n  ngOnInit() {\n    let postId = this.activateRoute.snapshot.params['id'];\n    this.fatchPost(postId);\n    this.fatchLoginUserDetails();\n  }\n  fatchPost(postId) {\n    this.postservice.getPostDetails(postId).subscribe(res => {\n      console.log(res);\n      this.post = res['post'];\n    });\n  }\n  fatchLoginUserDetails() {\n    let userId = localStorage.getItem(\"userId\");\n    this.authservice.getUserDetails(userId).subscribe(res => {\n      this.loggedUser = res['user'];\n    });\n  }\n  addCmt() {\n    this.cmtForm.patchValue({\n      postId: this.post.id,\n      cmtBy: this.loggedUser.id\n    });\n    console.log(this.cmtForm.value);\n    this.postservice.createComment(this.cmtForm.value).subscribe(res => {\n      this.msg = res['msg'];\n    });\n    this.cmtForm.reset();\n  }\n  addReply(cmtId) {\n    this.cmtForm.patchValue({\n      postId: this.post.id,\n      cmtBy: this.loggedUser.id,\n      parentId: cmtId\n    });\n    console.log(this.cmtForm.value);\n    this.postservice.createComment(this.cmtForm.value).subscribe(res => {\n      this.msg = res['msg'];\n    });\n    this.cmtForm.reset();\n  }\n  openReplySection(cmtId) {\n    let replyBox = document.getElementById(cmtId);\n    console.log(replyBox);\n    if (replyBox?.hasAttribute(\"hidden\")) {\n      console.log(1);\n      replyBox?.removeAttribute(\"hidden\");\n    } else {\n      console.log(2);\n      replyBox?.setAttribute(\"hidden\", \"true\");\n    }\n    console.log(\"reply on comment \");\n  }\n};\nAddCommentComponent = __decorate([Component({\n  selector: 'app-add-comment',\n  templateUrl: './add-comment.component.html',\n  styleUrls: ['./add-comment.component.scss']\n})], AddCommentComponent);\nexport { AddCommentComponent };","map":{"version":3,"mappings":"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","names":["Component","environment","FormControl","FormGroup","Validators","AddCommentComponent","constructor","postservice","activateRoute","authservice","apiURL","postId","required","cmtBy","comment","parentId","ngOnInit","snapshot","params","fatchPost","fatchLoginUserDetails","getPostDetails","subscribe","res","console","log","post","userId","localStorage","getItem","getUserDetails","loggedUser","addCmt","cmtForm","patchValue","id","value","createComment","msg","reset","addReply","cmtId","openReplySection","replyBox","document","getElementById","hasAttribute","removeAttribute","setAttribute","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/yash.prajapati/Desktop/Node/Instagram Clone/instagram-ng14/src/app/components/posts/add-comment/add-comment.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { environment } from 'src/environments/environment.development';\nimport { PostService } from '../post.service';\nimport jwt_decode from 'jwt-decode';\nimport { AuthService } from '../../auth/auth.service';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-add-comment',\n  templateUrl: './add-comment.component.html',\n  styleUrls: ['./add-comment.component.scss']\n})\nexport class AddCommentComponent {\n\n  post: any\n  imageUrl = environment.apiURL\n  loggedUser: any | undefined;\n  msg: any\n  rep\n\n  cmtForm = new FormGroup({\n    postId: new FormControl(\"\", Validators.required),\n    cmtBy: new FormControl(\"\", Validators.required),\n    comment: new FormControl(\"\", Validators.required),\n    parentId: new FormControl(null, Validators.required),\n\n  })\n\n  constructor(private postservice: PostService, private activateRoute: ActivatedRoute, private authservice: AuthService) { }\n\n  ngOnInit() {\n    let postId = this.activateRoute.snapshot.params['id']\n    this.fatchPost(postId)\n    this.fatchLoginUserDetails()\n\n  }\n\n  fatchPost(postId: any) {\n    this.postservice.getPostDetails(postId).subscribe((res: any) => {\n      console.log(res)\n      this.post = res['post']\n    })\n  }\n\n  fatchLoginUserDetails(): void {\n    let userId = localStorage.getItem(\"userId\")\n    this.authservice.getUserDetails(userId).subscribe((res: any) => {\n      this.loggedUser = res['user']\n    })\n  }\n\n  addCmt() {\n    this.cmtForm.patchValue({\n      postId: this.post.id,\n      cmtBy: this.loggedUser.id,\n    })\n    console.log(this.cmtForm.value)\n    this.postservice.createComment(this.cmtForm.value).subscribe((res: any) => {\n      this.msg = res['msg']\n    })\n    this.cmtForm.reset();\n  }\n\n  addReply(cmtId: any) {\n    this.cmtForm.patchValue({\n      postId: this.post.id,\n      cmtBy: this.loggedUser.id,\n      parentId: cmtId\n    })\n    console.log(this.cmtForm.value)\n    this.postservice.createComment(this.cmtForm.value).subscribe((res: any) => {\n      this.msg = res['msg']\n    })\n    this.cmtForm.reset();\n  }\n\n  openReplySection(cmtId: any) {\n\n    let replyBox = document.getElementById(cmtId)\n\n    console.log(replyBox)\n    if (replyBox?.hasAttribute(\"hidden\")) {\n      console.log(1)\n      replyBox?.removeAttribute(\"hidden\")\n    }\n    else {\n      console.log(2)\n      replyBox?.setAttribute(\"hidden\", \"true\")\n    }\n\n    console.log(\"reply on comment \")\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}